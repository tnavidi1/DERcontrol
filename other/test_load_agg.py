import numpy as np

def case47():

	if np.version.version == '1.12.1':
		datatype = float
	else:
		datatype = float
    
	## PYPOWER Case Format : Version 2
	ppc = {'version': '2'}

	##-----  Power Flow Data  -----##
	## system MVA base
	ppc['baseMVA'] = 1

	## bus data
	# bus_i type Pd Qd Gs Bs area Vm Va baseKV zone Vmax Vmin
	ppc['bus'] = np.array([
	    [0, 3, 30, 14.5296631, 0, 0, 1, 1, 0, 12.35, 1, 1.05, 0.95],
	    [1, 1, 0, 0, 0, 0, 1, 1, 0, 12.35, 1, 1.05, 0.95],
	    [2, 1, 0, 0, 0, 0, 1, 1, 0, 12.35, 1, 1.05, 0.95],
	    [3, 1, 0, 0, 0, 0, 1, 1, 0, 12.35, 1, 1.05, 0.95],
	    [4, 1, 0, 0, 0, 0, 1, 1, 0, 12.35, 1, 1.05, 0.95],
	    [5, 1, 0, 0, 0, 0, 1, 1, 0, 12.35, 1, 1.05, 0.95],
	    [6, 1, 0, 0, 0, 0, 1, 1, 0, 12.35, 1, 1.05, 0.95],
	    [7, 1, 0, 0, 0, 0, 1, 1, 0, 12.35, 1, 1.05, 0.95],
	    [8, 1, 0, 0, 0, 0, 1, 1, 0, 12.35, 1, 1.05, 0.95],
	    [9, 1, 0, 0, 0, 0, 1, 1, 0, 12.35, 1, 1.05, 0.95],
	    [10, 1, 0.67, 0.32449581, 0, 0, 1, 1, 0, 12.35, 1, 1.05, 0.95],
	    [11, 1, 0.45, 0.217944947, 0, 0, 1, 1, 0, 12.35, 1, 1.05, 0.95],
	    [12, 1, 0.89, 0.431046673, 0, 0, 1, 1, 0, 12.35, 1, 1.05, 0.95],
	    [13, 1, 0, 0, 0, 0, 1, 1, 0, 12.35, 1, 1.05, 0.95],
	    [14, 1, 0.07, 0.0339025473, 0, 0, 1, 1, 0, 12.35, 1, 1.05, 0.95],
	    [15, 1, 0.67, 0.32449581, 0, 0, 1, 1, 0, 12.35, 1, 1.05, 0.95],
	    [16, 1, 0, 0, 0, 0, 1, 1, 0, 12.35, 1, 1.05, 0.95],
	    [17, 1, 0.45, 0.217944947, 0, 0, 1, 1, 0, 12.35, 1, 1.05, 0.95],
	    [18, 1, 2.23, 1.08003829, 0, 0, 1, 1, 0, 12.35, 1, 1.05, 0.95],
	    [19, 1, 0.45, 0.217944947, 0, 0, 1, 1, 0, 12.35, 1, 1.05, 0.95],
	    [20, 1, 0.2, 0.096864421, 0, 0, 1, 1, 0, 12.35, 1, 1.05, 0.95],
	    [21, 1, 0, 0, 0, 0, 1, 1, 0, 12.35, 1, 1.05, 0.95],
	    [22, 1, 0.13, 0.0629618736, 0, 0, 1, 1, 0, 12.35, 1, 1.05, 0.95],
	    [23, 1, 0.13, 0.0629618736, 0, 0, 1, 1, 0, 12.35, 1, 1.05, 0.95],
	    [24, 1, 0.2, 0.096864421, 0, 0, 1, 1, 0, 12.35, 1, 1.05, 0.95],
	    [25, 1, 0.07, 0.0339025473, 0, 0, 1, 1, 0, 12.35, 1, 1.05, 0.95],
	    [26, 1, 0.13, 0.0629618736, 0, 0, 1, 1, 0, 12.35, 1, 1.05, 0.95],
	    [27, 1, 0.27, 0.130766968, 0, 0, 1, 1, 0, 12.35, 1, 1.05, 0.95],
	    [28, 1, 0.2, 0.096864421, 0, 0, 1, 1, 0, 12.35, 1, 1.05, 0.95],
	    [29, 1, 0, 0, 0, 0, 1, 1, 0, 12.35, 1, 1.05, 0.95],
	    [30, 1, 0.27, 0.130766968, 0, 0, 1, 1, 0, 12.35, 1, 1.05, 0.95],
	    [31, 1, 0, 0, 0, 0, 1, 1, 0, 12.35, 1, 1.05, 0.95],
	    [32, 1, 0.45, 0.217944947, 0, 0, 1, 1, 0, 12.35, 1, 1.05, 0.95],
	    [33, 1, 1.34, 0.64899162, 0, 0, 1, 1, 0, 12.35, 1, 1.05, 0.95],
	    [34, 1, 0.13, 0.0629618736, 0, 0, 1, 1, 0, 12.35, 1, 1.05, 0.95],
	    [35, 1, 0.67, 0.32449581, 0, 0, 1, 1, 0, 12.35, 1, 1.05, 0.95],
	    [36, 1, 0.13, 0.0629618736, 0, 0, 1, 1, 0, 12.35, 1, 1.05, 0.95],
	    [37, 1, 0, 0, 0, 0, 1, 1, 0, 12.35, 1, 1.05, 0.95],
	    [38, 1, 0.45, 0.217944947, 0, 0, 1, 1, 0, 12.35, 1, 1.05, 0.95],
	    [39, 1, 0.2, 0.096864421, 0, 0, 1, 1, 0, 12.35, 1, 1.05, 0.95],
	    [40, 1, 0.45, 0.217944947, 0, 0, 1, 1, 0, 12.35, 1, 1.05, 0.95],
	    [41, 1, 0, 0, 0, 0, 1, 1, 0, 12.35, 1, 1.05, 0.95],
	], dtype = datatype)

	## generator data
	# bus Pg Qg Qmax Qmin Vg mBase status Pmax Pmin Pc1 Pc2 Qc1min Qc1max Qc2min Qc2max ramp_agc ramp_10 ramp_30 ramp_q apf
	ppc['gen'] = np.array([
	    [0, 30, 12, 300, -300, 1, 1, 1, 250, -250, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0],
	], dtype = datatype)

	## branch data
	# fbus tbus r x b rateA rateB rateC ratio angle status angmin angmax
	ppc['branch'] = np.array([
	    [0, 1, 0.00169811011, 0.00529757905, 0, 250, 250, 250, 0, 0, 1, -360, 360],
	    [1, 2, 0.000203248701, 0.000603189693, 0, 250, 250, 250, 0, 0, 1, -360, 360],
	    [2, 3, 0.000301594847, 0.000603189693, 0, 250, 250, 250, 0, 0, 1, -360, 360],
	    [2, 12, 0.000603189693, 0.000203248701, 0, 250, 250, 250, 0, 0, 1, -360, 360],
	    [2, 13, 0.00140307168, 0.000301594847, 0, 250, 250, 250, 0, 0, 1, -360, 360],
	    [3, 16, 0.00220295366, 0.000399940992, 0, 250, 250, 250, 0, 0, 1, -360, 360],
	    [3, 4, 0.000701535839, 0.00119982298, 0, 250, 250, 250, 0, 0, 1, -360, 360],
	    [4, 20, 0.000399940992, 9.83461457e-05, 0, 250, 250, 250, 0, 0, 1, -360, 360],
	    [4, 5, 9.83461457e-05, 0.000203248701, 0, 250, 250, 250, 0, 0, 1, -360, 360],
	    [5, 21, 0.00110147683, 0.000399940992, 0, 250, 250, 250, 0, 0, 1, -360, 360],
	    [5, 6, 0.000203248701, 0.000301594847, 0, 250, 250, 250, 0, 0, 1, -360, 360],
	    [6, 26, 0.000498287138, 9.83461457e-05, 0, 250, 250, 250, 0, 0, 1, -360, 360],
	    [6, 7, 9.83461457e-05, 9.83461457e-05, 0, 250, 250, 250, 0, 0, 1, -360, 360],
	    [7, 34, 0.000301594847, 9.83461457e-05, 0, 250, 250, 250, 0, 0, 1, -360, 360],
	    [7, 33, 0.00159976397, 0.000301594847, 0, 250, 250, 250, 0, 0, 1, -360, 360],
	    [7, 35, 0.000701535839, 0.000203248701, 0, 250, 250, 250, 0, 0, 1, -360, 360],
	    [7, 29, 0.000498287138, 9.83461457e-05, 0, 250, 250, 250, 0, 0, 1, -360, 360],
	    [7, 8, 0.000203248701, 0.000203248701, 0, 250, 250, 250, 0, 0, 1, -360, 360],
	    [8, 9, 9.83461457e-05, 9.83461457e-05, 0, 250, 250, 250, 0, 0, 1, -360, 360],
	    [8, 36, 0.00100313069, 0.000301594847, 0, 250, 250, 250, 0, 0, 1, -360, 360],
	    [9, 10, 0.000701535839, 0.000498287138, 0, 250, 250, 250, 0, 0, 1, -360, 360],
	    [9, 40, 0.00150141782, 0.000799881985, 0, 250, 250, 250, 0, 0, 1, -360, 360],
	    [10, 41, 0.000203248701, 9.83461457e-05, 0, 250, 250, 250, 0, 0, 1, -360, 360],
	    [10, 11, 0.000498287138, 0.000301594847, 0, 250, 250, 250, 0, 0, 1, -360, 360],
	    [13, 15, 0.000301594847, 9.83461457e-05, 0, 250, 250, 250, 0, 0, 1, -360, 360],
	    [13, 14, 0.000701535839, 9.83461457e-05, 0, 250, 250, 250, 0, 0, 1, -360, 360],
	    [16, 17, 0.000799881985, 0.000603189693, 0, 250, 250, 250, 0, 0, 1, -360, 360],
	    [16, 19, 0.00140307168, 0.000301594847, 0, 250, 250, 250, 0, 0, 1, -360, 360],
	    [17, 18, 0.00129816912, 0.000301594847, 0, 250, 250, 250, 0, 0, 1, -360, 360],
	    [21, 25, 0.000301594847, 9.83461457e-05, 0, 250, 250, 250, 0, 0, 1, -360, 360],
	    [21, 22, 0.000701535839, 0.000203248701, 0, 250, 250, 250, 0, 0, 1, -360, 360],
	    [22, 23, 0.000701535839, 0.000203248701, 0, 250, 250, 250, 0, 0, 1, -360, 360],
	    [23, 24, 0.000399940992, 9.83461457e-05, 0, 250, 250, 250, 0, 0, 1, -360, 360],
	    [26, 27, 0.000301594847, 9.83461457e-05, 0, 250, 250, 250, 0, 0, 1, -360, 360],
	    [27, 28, 0.000203248701, 6.55640971e-05, 0, 250, 250, 250, 0, 0, 1, -360, 360],
	    [29, 30, 0.000498287138, 9.83461457e-05, 0, 250, 250, 250, 0, 0, 1, -360, 360],
	    [29, 31, 0.000498287138, 0.000301594847, 0, 250, 250, 250, 0, 0, 1, -360, 360],
	    [29, 32, 0.000701535839, 9.83461457e-05, 0, 250, 250, 250, 0, 0, 1, -360, 360],
	    [36, 37, 0.000399940992, 9.83461457e-05, 0, 250, 250, 250, 0, 0, 1, -360, 360],
	    [37, 38, 0.000399940992, 9.83461457e-05, 0, 250, 250, 250, 0, 0, 1, -360, 360],
	    [37, 39, 0.000399940992, 9.83461457e-05, 0, 250, 250, 250, 0, 0, 1, -360, 360],
	], dtype = datatype)

	##-----  OPF Data  -----##
	## generator cost data
	# 1 startup shutdown n x1 y1 ... xn yn
	# 2 startup shutdown n c(n-1) ... c0
	ppc['gencost'] = np.array([
	    [2, 0, 0, 2, 15, 0],
	], dtype = datatype)

	return ppc

if __name__ == '__main__':
	ppc = case47()
	max_loads = ppc['bus'][:,2]
	max_loads[0] = 0
	print(max_loads)


	"""
	Create a function that randomly aggregates the load profiles of several nodes until the maximum has reached a specified value

	Inputs:
	a data array with rows as nodes and columns as time like before
	function also takes an array max_loads like what is printed above
	function also takes a true or false variable called daily_max with default = False
	if daily_max is true then another input called time_resolution will be used default = np.nan


	Outputs:
	data array with the same number of rows as max_loads and same number of columns as original data array

	if daily_max == False:
	The function will randomly select a row from the input data array and add that row to a row in the new data array
	until the absolute maximum value of that row is greater than the corresponding row of max_loads
	Then it will remove the row that made it larger than max_loads and scale it by an appropriate amount so that the maximum is exactly equal to the value in max_loads

	example:
	input array =  [1 1 1 2 1]
	max_loads = 5

	pick random rows 3 times

	output array = [3 3 3 6 3]

	scale last added row to make it fit exactly

	output array = [2.5 2.5 2.5 5 2.5]

	if daily_max == True:
	Check to make sure user input a value for time_resolution so that it is not nan
	then
	do the same thing as when daily max is false
	except instead of using the absolute max of the whole array use the time resolution to calculate the average daily maximum
	make the output array have the same average daily maximum as max_loads

	"""





